"""
Module d'analyse formelle des arguments.
Utilise la biblioth√®que symbolique TweetyProject pour v√©rifier la coh√©rence et la validit√© logique
des propositions normalis√©es issues du pr√©traitement.
"""

from typing import List, Dict, Any
import jpype
import jpype.imports
from jpype.types import *

import os

jar_path =  jar_path = "C:/Users/julie/Documents/5A/GenAI Projet 4/2025-MSMIN5IN52-GenAI/groupe-protagoras/code/src/tweetyproject-full-with-dependencies-1.29.jar"
if not os.path.exists(jar_path):
    raise FileNotFoundError(f"Fichier TweetyProject introuvable : {jar_path}")

# D√©marrage de la JVM avec le bon classpath
if not jpype.isJVMStarted():
    jpype.startJVM(classpath=[jar_path])
    print("‚úÖ JVM initialis√©e avec TweetyProject.")
else:
    print("‚ÑπÔ∏è JVM d√©j√† active.")

# Test d'import
try:
    from net.sf.tweety.logics.prop import PropParser, Proposition, PlBeliefSet
    print("‚úÖ Import Java r√©ussi.")
except Exception as e:
    print("‚ùå Erreur d'import Tweety:", e)
# V√©rification

# ==========================================
# 1. Gestion de l'environnement TweetyProject
# ==========================================

def initialiser_tweety(jar_path: str):
    """
    Initialise la JVM et charge le JAR de TweetyProject.
    Args:
        jar_path (str): chemin vers le fichier TweetyProject .jar
    """
    if not jpype.isJVMStarted():
        if not os.path.exists(jar_path):
            raise FileNotFoundError(f"Fichier TweetyProject introuvable : {jar_path}")
        jpype.startJVM(classpath=[jar_path])
        print("‚úÖ JVM initialis√©e et TweetyProject charg√©.")


# ==========================================
# 2. V√©rification de la coh√©rence logique
# ==========================================

def verifier_coherence(propositions: List[str]) -> Dict[str, Any]:
    """
    V√©rifie si l'ensemble des propositions est logiquement coh√©rent.
    Utilise la logique propositionnelle de TweetyProject.
    
    Args:
        propositions (List[str]): liste de formules logiques (ex. ["A -> B", "A", "¬¨B"])
    
    Returns:
        Dict[str, Any]: r√©sultat contenant la coh√©rence et les d√©tails √©ventuels
    """
    from net.sf.tweety.logics.prop import PropParser, Proposition, PlBeliefSet
    from net.sf.tweety.logics.pl.sat import SatReasoner

    parser = PropParser()
    base = PlBeliefSet()

    for prop in propositions:
        try:
            formule = parser.parseFormula(prop)
            base.add(formule)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur de parsing sur {prop} : {e}")

    reasoner = SatReasoner()
    coherent = reasoner.isConsistent(base)

    return {
        "coherent": bool(coherent),
        "nombre_formules": len(base),
        "formules": [str(f) for f in base]
    }


# ==========================================
# 3. V√©rification de la validit√© d'une inf√©rence
# ==========================================

def verifier_inference(premisses: List[str], conclusion: str) -> Dict[str, Any]:
    """
    V√©rifie si la conclusion d√©coule logiquement des pr√©misses.
    
    Args:
        premisses (List[str]): liste de formules logiques
        conclusion (str): formule logique repr√©sentant la conclusion
    
    Returns:
        Dict[str, Any]: r√©sultat avec verdict et explication
    """
    from net.sf.tweety.logics.prop import PropParser, Proposition, PlBeliefSet
    from net.sf.tweety.logics.pl.sat import SatReasoner

    parser = PropParser()
    base = PlBeliefSet()
    reasoner = SatReasoner()

    for p in premisses:
        try:
            base.add(parser.parseFormula(p))
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur dans la pr√©misse '{p}': {e}")

    try:
        conclusion_formula = parser.parseFormula(conclusion)
    except Exception as e:
        return {"valid": False, "error": f"Erreur dans la conclusion : {e}"}

    valid = reasoner.entails(base, conclusion_formula)

    return {
        "valid": bool(valid),
        "premisses": premisses,
        "conclusion": conclusion,
        "explication": "La conclusion d√©coule logiquement des pr√©misses."
        if valid else "La conclusion ne d√©coule pas logiquement des pr√©misses."
    }


# ==========================================
# 4. Exemple d‚Äôutilisation
# ==========================================

if __name__ == "__main__":
    # üß† Exemple : syllogisme classique
    jar_path = "C:/Users/julie/Documents/5A/GenAI Projet 4/2025-MSMIN5IN52-GenAI/groupe-protagoras/code/src/tweetyproject-full-with-dependencies-1.29.jar"  # üîß √Ä adapter √† ton environnement

    try:
        initialiser_tweety(jar_path)
    except Exception as e:
        print(f"Erreur d'initialisation TweetyProject : {e}")
        exit(1)

    premisses = ["Human -> Mortal", "Human(Socrate)"]
    conclusion = "Mortal(Socrate)"

    resultat_inference = verifier_inference(premisses, conclusion)
    print("R√©sultat de l'inf√©rence :", resultat_inference)

    resultat_coherence = verifier_coherence(premisses + [conclusion])
    print("R√©sultat de la coh√©rence :", resultat_coherence)
